// Generated by https://quicktype.io
import { blob } from "./blob";
import { db } from "~/server/db";
import {
  users,
  cards as db_cards,
  captures as db_captures,
} from "~/server/db/schema";
import { eq } from "drizzle-orm";
import { getUserDataById } from "~/server/queries/user";
async function importData() {
  const cards = blob.cards;
  const captures = cards.map((c) => c.captures).flat();
  // Import all cards for the first user in the db
  const user = await db
    .select()
    .from(users)
    .where(eq(users.email, "skycards@starnumber.lol"))
    .execute();

  if (!user[0]) {
    console.log("NO USER");
    return;
  }
  const currentUserData = await getUserDataById(user[0].id);
  if (!currentUserData) {
    console.log("NO USER DATA");
    return;
  }
  for (const card of cards) {
    const cardInsert: typeof db_cards.$inferInsert = {
      userId: currentUserData.id,
      aircraftId: card.aircraftId,
    };
    const cardReturn = await db
      .insert(db_cards)
      .values(cardInsert)
      .returning({
        id: db_cards.id,
      })
      .execute();
    console.log("INSERTED CARD", cardInsert);
    for (const capture of card.captures) {
      const captureInsert: typeof db_captures.$inferInsert = {
        alt: capture.alt,
        callsign: capture.callsign,
        cloudiness: capture.cloudiness,
        destination: capture.destination,
        destinationId: capture.destinationId,
        associatedAirportId: capture.associatedAirportId,
        flight: capture.flight,
        flightId: capture.flightId,
        gpsLat: capture.gpsLat,
        gpsLon: capture.gpsLon,
        glow: capture.glow,
        icon: capture.icon,
        lat: capture.lat,
        lon: capture.lon,
        onGround: capture.onGround,
        origin: capture.origin,
        originId: capture.originId,
        radarLat: capture.radarLat,
        radarLon: capture.radarLon,
        radarRange: capture.radarRange,
        reg: capture.reg,
        source: capture.source,
        speed: capture.speed,
        status: capture.status,
        timestamp: capture.timestamp,
        track: capture.track,
        xp: capture.xp,
        cardId: cardReturn[0]!.id ?? "",
        coverage: capture.coverage,
        distance: capture.distance,
        model: capture.model,
        xpUserBonus: capture.xpUserBonus,
        imageCopy: capture.imageCopy,
        imageLarge: capture.imageLarge,
        imageThumb: capture.imageThumb,
      };
      await db.insert(db_captures).values(captureInsert).execute();
    }
  }
}

importData()
  .then(() => console.log("Done importing data"))
  .catch((e) => console.log(e));
